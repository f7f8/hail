//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSMutableDictionary, NSRecursiveLock;

@interface NWPolicyInternel : NSObject
{
    NSRecursiveLock *_lock;	// 8 = 0x8
    NSMutableDictionary *_localDnsDict;	// 16 = 0x10
    NSMutableDictionary *_netSTDict;	// 24 = 0x18
    NSMutableDictionary *_failOverDict;	// 32 = 0x20
    NSMutableDictionary *_schemeList;	// 40 = 0x28
    NSMutableDictionary *_config;	// 48 = 0x30
}

+ (long long)currentSeconds;	// IMP=0x00000001013e6244
+ (_Bool)isWiFiNetwork:(id)arg1;	// IMP=0x00000001013e5bd8
+ (void)checkDirIsCreated:(id)arg1;	// IMP=0x00000001013e523c
+ (id)configFilePath;	// IMP=0x00000001013e5184
+ (id)schemeFilePath;	// IMP=0x00000001013e50cc
+ (id)strategyDoc;	// IMP=0x00000001013e4fd8
+ (void)checkStrategyDir;	// IMP=0x00000001013e4e84
+ (id)stratgyPathWithEnviroment;	// IMP=0x00000001013e4db0
+ (id)loadLocalDnsCache;	// IMP=0x00000001013e2a8c
+ (id)shareInstance;	// IMP=0x00000001013e08e0
@property(retain, nonatomic) NSMutableDictionary *config; // @synthesize config=_config;
@property(retain, nonatomic) NSMutableDictionary *schemeList; // @synthesize schemeList=_schemeList;
@property(retain, nonatomic) NSMutableDictionary *failOverDict; // @synthesize failOverDict=_failOverDict;
@property(retain, nonatomic) NSMutableDictionary *netSTDict; // @synthesize netSTDict=_netSTDict;
@property(retain, nonatomic) NSMutableDictionary *localDnsDict; // @synthesize localDnsDict=_localDnsDict;
- (void).cxx_destruct;	// IMP=0x00000001013e7d58
- (id)getNetTypeKey:(unsigned long long)arg1;	// IMP=0x00000001013e7bdc
- (id)getNetTypeKey;	// IMP=0x00000001013e7ae4
- (void)updateConfig:(id)arg1 fcl:(id)arg2 fct:(id)arg3;	// IMP=0x00000001013e799c
- (id)getDNSIP:(id)arg1;	// IMP=0x00000001013e78e4
- (void)resetFailOverRefreshTime:(id)arg1 withConnectionType:(id)arg2;	// IMP=0x00000001013e7780
- (void)failOverRefresh:(id)arg1 withConnectionType:(id)arg2;	// IMP=0x00000001013e7468
- (id)getLocalDNSIp:(id)arg1;	// IMP=0x00000001013e73ac
- (void)parseLocalDns:(id)arg1;	// IMP=0x00000001013e6e8c
- (_Bool)validateFailAllPolicy:(id)arg1 withConnectionType:(id)arg2;	// IMP=0x00000001013e6aac
- (id)getAllPolicyResult:(unsigned long long)arg1;	// IMP=0x00000001013e66d8
- (id)getPolicyResult:(id)arg1 withNetStatus:(unsigned long long)arg2 copyItems:(_Bool)arg3;	// IMP=0x00000001013e65b4
- (_Bool)containsAcceleratePolicy:(id)arg1 withScheme:(id)arg2 withSuccessAisle:(_Bool)arg3;	// IMP=0x00000001013e629c
- (void)clearFlowControlBeginTime;	// IMP=0x00000001013e6224
- (void)setFlowControlBeginTime:(_Bool)arg1;	// IMP=0x00000001013e6128
- (long long)flowControlBegintime;	// IMP=0x00000001013e60c8
- (void)setFlowControlTime:(id)arg1;	// IMP=0x00000001013e5ff4
- (int)flowControlTime;	// IMP=0x00000001013e5f94
- (void)setFlowControLevel:(id)arg1;	// IMP=0x00000001013e5f5c
- (int)flowControlLevel:(_Bool)arg1;	// IMP=0x00000001013e5e54
- (void)setCv:(id)arg1;	// IMP=0x00000001013e5d58
- (unsigned int)cv;	// IMP=0x00000001013e5c78
- (id)scanSTFileByLRU:(id)arg1;	// IMP=0x00000001013e578c
- (void)encodeArchiveFile:(id)arg1 file:(id)arg2;	// IMP=0x00000001013e554c
- (id)decodeArchiveFile:(id)arg1;	// IMP=0x00000001013e5370
- (id)curNetStrategyPath:(id)arg1;	// IMP=0x00000001013e4d10
- (void)loadConfig;	// IMP=0x00000001013e4bfc
- (id)policyModel:(id)arg1;	// IMP=0x00000001013e4b70
- (void)loadSTWithNetType:(id)arg1;	// IMP=0x00000001013e49b0
- (void)loadSchemeST;	// IMP=0x00000001013e48a4
- (void)resetPolicyEnvironmentChanged;	// IMP=0x00000001013e4800
- (void)asyncWritePolicyForCache;	// IMP=0x00000001013e4404
- (void)writePolicyForCache;	// IMP=0x00000001013e4354
- (void)eliminateSchemeList;	// IMP=0x00000001013e4028
- (id)writePolicyExeResult:(id)arg1 withConnRT:(long long)arg2 withExeStatus:(int)arg3 withErrInfo:(id)arg4 raceTime:(long long)arg5;	// IMP=0x00000001013e3de0
- (void)refreshPolicy:(id)arg1 networkStatus:(unsigned long long)arg2 internal:(_Bool)arg3;	// IMP=0x00000001013e3af4
- (void)refreshIPPolicy:(id)arg1 withStatus:(unsigned long long)arg2;	// IMP=0x00000001013e3ae4
- (void)refreshIPPolicys:(id)arg1 withStatus:(unsigned long long)arg2;	// IMP=0x00000001013e3890
- (void)loadInternalHotST:(id)arg1;	// IMP=0x00000001013e364c
- (void)loadInternalST;	// IMP=0x00000001013e33e8
- (id)colletExpiredColdHosts:(id)arg1 modificationTime:(long long)arg2;	// IMP=0x00000001013e2730
- (id)colletHotHosts:(id)arg1 modificationTime:(long long)arg2;	// IMP=0x00000001013e241c
- (void)checkShouldFetchAMDC;	// IMP=0x00000001013e239c
- (void)fetchStrategy:(id)arg1;	// IMP=0x00000001013e232c
- (void)queryComplexPolicy:(id)arg1 force:(_Bool)arg2;	// IMP=0x00000001013e1adc
- (id)getCNameWithHost:(id)arg1;	// IMP=0x00000001013e19c8
- (id)getPolicySchemeWithHost:(id)arg1;	// IMP=0x00000001013e17a8
- (void)netTypeChange;	// IMP=0x00000001013e12c0
- (void)loadStrategy;	// IMP=0x00000001013e0c50
- (void)dealloc;	// IMP=0x00000001013e0bd4
- (id)init;	// IMP=0x00000001013e0960

@end

