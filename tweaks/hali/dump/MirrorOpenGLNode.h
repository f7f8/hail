//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class MirrorOpenGLFrameBuffer, NSMutableArray;

@interface MirrorOpenGLNode : NSObject
{
    NSMutableArray *_targets;	// 8 = 0x8
    NSMutableArray *_targetTextureIndices;	// 16 = 0x10
    MirrorOpenGLFrameBuffer *_outputFramebuffer;	// 24 = 0x18
    _Bool _allTargetsWantMonochromeData;	// 32 = 0x20
    _Bool _usingNextFrameForImageCapture;	// 33 = 0x21
    struct CGSize _inputTextureSize;	// 40 = 0x28
    struct CGSize _cachedMaximumOutputSize;	// 56 = 0x38
    struct CGSize _forcedMaximumSize;	// 72 = 0x48
    _Bool _overrideInputSize;	// 88 = 0x58
    _Bool _shouldIgnoreUpdatesToThisTarget;	// 89 = 0x59
    _Bool _enabled;	// 90 = 0x5a
    id <MirrorOpenGLProtocol> _targetToIgnoreForUpdates;	// 96 = 0x60
    CDUnknownBlockType _frameProcessingCompletionBlock;	// 104 = 0x68
    struct MirrorTextureOptions _outputTextureOptions;	// 112 = 0x70
}

@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(nonatomic) _Bool shouldIgnoreUpdatesToThisTarget; // @synthesize shouldIgnoreUpdatesToThisTarget=_shouldIgnoreUpdatesToThisTarget;
@property(copy, nonatomic) CDUnknownBlockType frameProcessingCompletionBlock; // @synthesize frameProcessingCompletionBlock=_frameProcessingCompletionBlock;
@property(nonatomic) struct CGSize cachedMaximumOutputSize; // @synthesize cachedMaximumOutputSize=_cachedMaximumOutputSize;
@property(nonatomic) id <MirrorOpenGLProtocol> targetToIgnoreForUpdates; // @synthesize targetToIgnoreForUpdates=_targetToIgnoreForUpdates;
@property(readonly, nonatomic) NSMutableArray *targetTextureIndices; // @synthesize targetTextureIndices=_targetTextureIndices;
@property(retain, nonatomic) MirrorOpenGLFrameBuffer *outputFramebuffer; // @synthesize outputFramebuffer=_outputFramebuffer;
@property(nonatomic) struct MirrorTextureOptions outputTextureOptions; // @synthesize outputTextureOptions=_outputTextureOptions;
- (void).cxx_destruct;	// IMP=0x00000001013627bc
- (void)dealloc;	// IMP=0x00000001013625fc
- (_Bool)shouldUpdatesSimpleBufferToThisTarget;	// IMP=0x00000001013625f4
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize)arg1;	// IMP=0x00000001013625f0
- (void)forceProcessingAtSize:(struct CGSize)arg1;	// IMP=0x00000001013625ec
- (struct CGImage *)newCGImageFromCurrentlyProcessedOutput;	// IMP=0x00000001013625e4
- (void)useNextFrameForImageCapture;	// IMP=0x00000001013625e0
- (void)removeAllTargets;	// IMP=0x00000001013622e8
- (void)removeTarget:(id)arg1;	// IMP=0x000000010136206c
- (void)addTarget:(id)arg1 atTextureLocation:(long long)arg2;	// IMP=0x0000000101361d4c
- (void)addTarget:(id)arg1;	// IMP=0x0000000101361cc8
- (void)setInputFramebufferForTarget:(id)arg1 atIndex:(long long)arg2;	// IMP=0x0000000101361c30
- (void)removeOutputFramebuffer;	// IMP=0x0000000101361c20
- (id)framebufferForOutput;	// IMP=0x0000000101361c14
- (id)targets;	// IMP=0x0000000101361bf4
- (id)init;	// IMP=0x0000000101361ac4

@end

