//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "MirrorOpenGLNode.h"

#import "MirrorOpenGLProtocol.h"

@class MirrorGLKProgram, MirrorOpenGLFrameBuffer, NSMutableDictionary, NSObject<OS_dispatch_semaphore>, NSString;

@interface MirrorOpenGLFilter : MirrorOpenGLNode <MirrorOpenGLProtocol>
{
    MirrorOpenGLFrameBuffer *_firstInputFramebuffer;	// 96 = 0x60
    MirrorGLKProgram *_filterProgram;	// 104 = 0x68
    int _filterPositionAttribute;	// 112 = 0x70
    int _filterTextureCoordinateAttribute;	// 116 = 0x74
    int _filterInputTextureUniform;	// 120 = 0x78
    float _backgroundColorRed;	// 124 = 0x7c
    float _backgroundColorGreen;	// 128 = 0x80
    float _backgroundColorBlue;	// 132 = 0x84
    float _backgroundColorAlpha;	// 136 = 0x88
    _Bool _isEndProcessing;	// 140 = 0x8c
    struct CGSize _currentFilterSize;	// 144 = 0x90
    int _inputRotation;	// 160 = 0xa0
    _Bool _currentMonochromeInput;	// 164 = 0xa4
    NSMutableDictionary *_uniformStateRestorationBlocks;	// 168 = 0xa8
    NSObject<OS_dispatch_semaphore> *_imageCaptureSemaphore;	// 176 = 0xb0
    _Bool _preventRendering;	// 184 = 0xb8
    struct __CVBuffer *_renderTarget;	// 192 = 0xc0
}

+ (const float *)textureCoordinatesForRotation:(int)arg1;	// IMP=0x000000010136f1c4
@property(readonly) struct __CVBuffer *renderTarget; // @synthesize renderTarget=_renderTarget;
@property(nonatomic) _Bool currentMonochromeInput; // @synthesize currentMonochromeInput=_currentMonochromeInput;
@property(nonatomic) _Bool preventRendering; // @synthesize preventRendering=_preventRendering;
- (void).cxx_destruct;	// IMP=0x0000000101371770
- (_Bool)wantsMonochromeInput;	// IMP=0x0000000101371718
- (void)didEndProcessing;	// IMP=0x00000001013715d0
- (struct CGSize)maximumOutputSize;	// IMP=0x00000001013715c0
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize)arg1;	// IMP=0x0000000101371530
- (void)forceProcessingAtSize:(struct CGSize)arg1;	// IMP=0x00000001013714b0
- (void)setInputRotation:(int)arg1 atIndex:(long long)arg2;	// IMP=0x00000001013714a0
- (void)setInputSize:(struct CGSize)arg1 atIndex:(long long)arg2;	// IMP=0x000000010137131c
- (struct CGPoint)rotatedPoint:(struct CGPoint)arg1 forRotation:(int)arg2;	// IMP=0x0000000101371278
- (struct CGSize)rotatedSize:(struct CGSize)arg1 forIndex:(long long)arg2;	// IMP=0x0000000101371234
- (void)setInputFramebuffer:(id)arg1 atIndex:(long long)arg2;	// IMP=0x00000001013711c0
- (long long)nextAvailableTextureIndex;	// IMP=0x00000001013711b8
- (void)inputFramebufferAtTime:(CDStruct_1b6d18a9)arg1 atIndex:(long long)arg2;	// IMP=0x000000010137112c
- (void)setUniformsForProgramAtIndex:(unsigned long long)arg1;	// IMP=0x00000001013710c8
- (void)setAndExecuteUniformStateCallbackAtIndex:(int)arg1 forProgram:(id)arg2 toBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000101370fe8
- (void)setInteger:(int)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x0000000101370e3c
- (void)setFloatArray:(float *)arg1 length:(int)arg2 forUniform:(int)arg3 program:(id)arg4;	// IMP=0x0000000101370b90
- (void)setVec4:(struct MirrorVector4)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x00000001013709b8
- (void)setVec3:(struct MirrorVector3)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x00000001013707dc
- (void)setSize:(struct CGSize)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x00000001013705c4
- (void)setPoint:(struct CGPoint)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x00000001013703ac
- (void)setFloat:(float)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x00000001013701f0
- (void)setMatrix4f:(struct MirrorMatrix4x4)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x0000000101370000
- (void)setMatrix3f:(struct MirrorMatrix3x3)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000010136fe20
- (void)setFloatArray:(float *)arg1 length:(int)arg2 forUniform:(id)arg3;	// IMP=0x000000010136fd8c
- (void)setFloatVec4:(struct MirrorVector4)arg1 forUniform:(id)arg2;	// IMP=0x000000010136fce0
- (void)setFloatVec3:(struct MirrorVector3)arg1 forUniformName:(id)arg2;	// IMP=0x000000010136fc3c
- (void)setPoint:(struct CGPoint)arg1 forUniformName:(id)arg2;	// IMP=0x000000010136fba8
- (void)setSize:(struct CGSize)arg1 forUniformName:(id)arg2;	// IMP=0x000000010136fb14
- (void)setFloat:(float)arg1 forUniformName:(id)arg2;	// IMP=0x000000010136fa88
- (void)setInteger:(int)arg1 forUniformName:(id)arg2;	// IMP=0x000000010136fa04
- (void)setBackgroundColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;	// IMP=0x000000010136f9d0
- (struct CGSize)outputFrameSize;	// IMP=0x000000010136f9b8
- (void)informTargetsAboutNewFrameAtTime:(CDStruct_1b6d18a9)arg1;	// IMP=0x000000010136f520
- (void)renderToTextureWithVertices:(const float *)arg1 textureCoordinates:(const float *)arg2;	// IMP=0x000000010136f1dc
- (struct CGSize)sizeOfFBO;	// IMP=0x000000010136f14c
- (struct CGImage *)newCGImageFromCurrentlyProcessedOutput;	// IMP=0x000000010136f094
- (void)useNextFrameForImageCapture;	// IMP=0x000000010136f06c
- (void)dealloc;	// IMP=0x000000010136f034
- (void)setupFilterForSize:(struct CGSize)arg1;	// IMP=0x000000010136f030
- (id)init;	// IMP=0x000000010136efd8
- (id)initWithFragmentShaderFromString:(id)arg1;	// IMP=0x000000010136ef78
- (id)initWithVertexShaderFromString:(id)arg1 fragmentShaderFromString:(id)arg2;	// IMP=0x000000010136ebbc

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

