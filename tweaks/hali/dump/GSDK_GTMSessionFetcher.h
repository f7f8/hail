//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSURLSessionDelegate.h"

@class GSDK_GTMSessionUploadFetcher, NSArray, NSData, NSDate, NSDictionary, NSError, NSHTTPCookieStorage, NSMutableData, NSMutableDictionary, NSMutableURLRequest, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSOperationQueue, NSString, NSTimer, NSURL, NSURLCredential, NSURLResponse, NSURLSession, NSURLSessionConfiguration, NSURLSessionTask;

@interface GSDK_GTMSessionFetcher : NSObject <NSURLSessionDelegate>
{
    NSMutableURLRequest *_request;	// 8 = 0x8
    NSURLSession *_session;	// 16 = 0x10
    _Bool _shouldInvalidateSession;	// 24 = 0x18
    NSURLSession *_sessionNeedingInvalidation;	// 32 = 0x20
    NSURLSessionConfiguration *_configuration;	// 40 = 0x28
    NSURLSessionTask *_sessionTask;	// 48 = 0x30
    NSString *_taskDescription;	// 56 = 0x38
    float _taskPriority;	// 64 = 0x40
    NSURLResponse *_response;	// 72 = 0x48
    NSString *_sessionIdentifier;	// 80 = 0x50
    _Bool _wasCreatedFromBackgroundSession;	// 88 = 0x58
    _Bool _didCreateSessionIdentifier;	// 89 = 0x59
    NSString *_sessionIdentifierUUID;	// 96 = 0x60
    _Bool _userRequestedBackgroundSession;	// 104 = 0x68
    _Bool _usingBackgroundSession;	// 105 = 0x69
    NSMutableData *_downloadedData;	// 112 = 0x70
    NSError *_downloadFinishedError;	// 120 = 0x78
    NSData *_downloadResumeData;	// 128 = 0x80
    NSURL *_destinationFileURL;	// 136 = 0x88
    long long _downloadedLength;	// 144 = 0x90
    NSURLCredential *_credential;	// 152 = 0x98
    NSURLCredential *_proxyCredential;	// 160 = 0xa0
    _Bool _isStopNotificationNeeded;	// 168 = 0xa8
    _Bool _isUsingTestBlock;	// 169 = 0xa9
    id _userData;	// 176 = 0xb0
    NSMutableDictionary *_properties;	// 184 = 0xb8
    NSObject<OS_dispatch_queue> *_callbackQueue;	// 192 = 0xc0
    NSObject<OS_dispatch_group> *_callbackGroup;	// 200 = 0xc8
    NSOperationQueue *_delegateQueue;	// 208 = 0xd0
    id <GTMFetcherAuthorizationProtocol> _authorizer;	// 216 = 0xd8
    id <GTMSessionFetcherServiceProtocol> _service;	// 224 = 0xe0
    NSString *_serviceHost;	// 232 = 0xe8
    long long _servicePriority;	// 240 = 0xf0
    _Bool _userStoppedFetching;	// 248 = 0xf8
    _Bool _isRetryEnabled;	// 249 = 0xf9
    NSTimer *_retryTimer;	// 256 = 0x100
    unsigned long long _retryCount;	// 264 = 0x108
    double _maxRetryInterval;	// 272 = 0x110
    double _minRetryInterval;	// 280 = 0x118
    double _retryFactor;	// 288 = 0x120
    double _lastRetryInterval;	// 296 = 0x128
    NSDate *_initialBeginFetchDate;	// 304 = 0x130
    NSDate *_initialRequestDate;	// 312 = 0x138
    _Bool _hasAttemptedAuthRefresh;	// 320 = 0x140
    NSString *_comment;	// 328 = 0x148
    NSString *_log;	// 336 = 0x150
    NSMutableData *_loggedStreamData;	// 344 = 0x158
    NSURL *_redirectedFromURL;	// 352 = 0x160
    NSString *_logRequestBody;	// 360 = 0x168
    NSString *_logResponseBody;	// 368 = 0x170
    _Bool _hasLoggedError;	// 376 = 0x178
    _Bool _deferResponseBodyLogging;	// 377 = 0x179
    _Bool _canShareSession;	// 378 = 0x17a
    _Bool _useUploadTask;	// 379 = 0x17b
    _Bool _allowLocalhostRequest;	// 380 = 0x17c
    _Bool _allowInvalidServerCertificates;	// 381 = 0x17d
    CDUnknownBlockType _configurationBlock;	// 384 = 0x180
    NSDictionary *_sessionUserInfo;	// 392 = 0x188
    CDUnknownBlockType _completionHandler;	// 400 = 0x190
    NSData *_bodyData;	// 408 = 0x198
    NSURL *_bodyFileURL;	// 416 = 0x1a0
    long long _bodyLength;	// 424 = 0x1a8
    CDUnknownBlockType _bodyStreamProvider;	// 432 = 0x1b0
    CDUnknownBlockType _accumulateDataBlock;	// 440 = 0x1b8
    CDUnknownBlockType _receivedProgressBlock;	// 448 = 0x1c0
    CDUnknownBlockType _downloadProgressBlock;	// 456 = 0x1c8
    CDUnknownBlockType _resumeDataBlock;	// 464 = 0x1d0
    CDUnknownBlockType _didReceiveResponseBlock;	// 472 = 0x1d8
    CDUnknownBlockType _willRedirectBlock;	// 480 = 0x1e0
    CDUnknownBlockType _sendProgressBlock;	// 488 = 0x1e8
    CDUnknownBlockType _willCacheURLResponseBlock;	// 496 = 0x1f0
    CDUnknownBlockType _retryBlock;	// 504 = 0x1f8
    NSArray *_allowedInsecureSchemes;	// 512 = 0x200
    NSHTTPCookieStorage *_cookieStorage;	// 520 = 0x208
    CDUnknownBlockType _testBlock;	// 528 = 0x210
    unsigned long long _backgroundTaskIdentifier;	// 536 = 0x218
}

+ (CDUnknownBlockType)systemCompletionHandlerForSessionIdentifier:(id)arg1;	// IMP=0x00000001012f67b4
+ (void)setSystemCompletionHandler:(CDUnknownBlockType)arg1 forSessionIdentifier:(id)arg2;	// IMP=0x00000001012f6684
+ (void)setGlobalTestBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001012f22e0
+ (id)staticCookieStorage;	// IMP=0x00000001012f11e8
+ (void)application:(id)arg1 handleEventsForBackgroundURLSession:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001012f06a4
+ (id)fetchersForBackgroundSessions;	// IMP=0x00000001012f046c
+ (id)activePersistedBackgroundSessions;	// IMP=0x00000001012f0234
+ (id)fetcherUserDefaults;	// IMP=0x00000001012efee0
+ (_Bool)appAllowsInsecureRequests;	// IMP=0x00000001012ec770
+ (id)sessionIdentifierToFetcherMap;	// IMP=0x00000001012ec6f4
+ (id)fetcherWithSessionIdentifier:(id)arg1;	// IMP=0x00000001012ec5bc
+ (id)fetcherWithDownloadResumeData:(id)arg1;	// IMP=0x00000001012ec534
+ (id)fetcherWithURLString:(id)arg1;	// IMP=0x00000001012ec4cc
+ (id)fetcherWithURL:(id)arg1;	// IMP=0x00000001012ec464
+ (id)fetcherWithRequest:(id)arg1;	// IMP=0x00000001012ec3fc
+ (void)load;	// IMP=0x00000001012ec3d8
+ (void)deleteLogDirectoriesOlderThanDate:(id)arg1;	// IMP=0x00000001012fa36c
+ (id)htmlFileName;	// IMP=0x00000001012fa340
+ (id)symlinkNameSuffix;	// IMP=0x00000001012fa314
+ (id)processNameLogPrefix;	// IMP=0x00000001012fa284
+ (id)loggingDateStamp;	// IMP=0x00000001012fa1ac
+ (void)setLoggingDateStamp:(id)arg1;	// IMP=0x00000001012fa17c
+ (id)loggingProcessName;	// IMP=0x00000001012fa0cc
+ (void)setLoggingProcessName:(id)arg1;	// IMP=0x00000001012fa09c
+ (_Bool)isLoggingToFileEnabled;	// IMP=0x00000001012fa090
+ (void)setLoggingToFileEnabled:(_Bool)arg1;	// IMP=0x00000001012fa084
+ (_Bool)isLoggingEnabled;	// IMP=0x00000001012fa078
+ (void)setLoggingEnabled:(_Bool)arg1;	// IMP=0x00000001012fa06c
+ (id)logDirectoryForCurrentRun;	// IMP=0x00000001012f9e14
+ (void)setLogDirectoryForCurrentRun:(id)arg1;	// IMP=0x00000001012f9de4
+ (id)loggingDirectory;	// IMP=0x00000001012f9cac
+ (void)setLoggingDirectory:(id)arg1;	// IMP=0x00000001012f9c7c
+ (id)headersStringForDictionary:(id)arg1;	// IMP=0x00000001012fcfa0
+ (id)snipSubstringOfString:(id)arg1 betweenStartString:(id)arg2 endString:(id)arg3;	// IMP=0x00000001012fce84
@property(readonly) _Bool wasCreatedFromBackgroundSession; // @synthesize wasCreatedFromBackgroundSession=_wasCreatedFromBackgroundSession;
@property unsigned long long backgroundTaskIdentifier; // @synthesize backgroundTaskIdentifier=_backgroundTaskIdentifier;
@property _Bool hasLoggedError; // @synthesize hasLoggedError=_hasLoggedError;
@property(copy) NSString *logResponseBody; // @synthesize logResponseBody=_logResponseBody;
@property(copy) NSString *logRequestBody; // @synthesize logRequestBody=_logRequestBody;
@property(retain) NSURL *redirectedFromURL; // @synthesize redirectedFromURL=_redirectedFromURL;
@property(copy) NSString *log; // @synthesize log=_log;
@property(copy) NSString *comment; // @synthesize comment=_comment;
@property(copy) CDUnknownBlockType testBlock; // @synthesize testBlock=_testBlock;
@property(readonly) NSDate *initialBeginFetchDate; // @synthesize initialBeginFetchDate=_initialBeginFetchDate;
@property(retain) NSHTTPCookieStorage *cookieStorage; // @synthesize cookieStorage=_cookieStorage;
@property _Bool allowInvalidServerCertificates; // @synthesize allowInvalidServerCertificates=_allowInvalidServerCertificates;
@property _Bool allowLocalhostRequest; // @synthesize allowLocalhostRequest=_allowLocalhostRequest;
@property(copy) NSArray *allowedInsecureSchemes; // @synthesize allowedInsecureSchemes=_allowedInsecureSchemes;
@property _Bool useUploadTask; // @synthesize useUploadTask=_useUploadTask;
@property double retryFactor; // @synthesize retryFactor=_retryFactor;
@property(copy) CDUnknownBlockType retryBlock; // @synthesize retryBlock=_retryBlock;
@property(copy) CDUnknownBlockType willCacheURLResponseBlock; // @synthesize willCacheURLResponseBlock=_willCacheURLResponseBlock;
@property(copy) CDUnknownBlockType sendProgressBlock; // @synthesize sendProgressBlock=_sendProgressBlock;
@property(copy) CDUnknownBlockType willRedirectBlock; // @synthesize willRedirectBlock=_willRedirectBlock;
@property(copy) CDUnknownBlockType didReceiveResponseBlock; // @synthesize didReceiveResponseBlock=_didReceiveResponseBlock;
@property(copy) CDUnknownBlockType resumeDataBlock; // @synthesize resumeDataBlock=_resumeDataBlock;
@property(copy) CDUnknownBlockType downloadProgressBlock; // @synthesize downloadProgressBlock=_downloadProgressBlock;
@property(copy) CDUnknownBlockType receivedProgressBlock; // @synthesize receivedProgressBlock=_receivedProgressBlock;
@property(copy) CDUnknownBlockType accumulateDataBlock; // @synthesize accumulateDataBlock=_accumulateDataBlock;
@property long long servicePriority; // @synthesize servicePriority=_servicePriority;
@property(copy) NSString *serviceHost; // @synthesize serviceHost=_serviceHost;
@property(retain) id <GTMSessionFetcherServiceProtocol> service; // @synthesize service=_service;
@property(retain) id <GTMFetcherAuthorizationProtocol> authorizer; // @synthesize authorizer=_authorizer;
@property(copy) CDUnknownBlockType bodyStreamProvider; // @synthesize bodyStreamProvider=_bodyStreamProvider;
@property(retain) NSData *bodyData; // @synthesize bodyData=_bodyData;
@property(retain) NSURLCredential *proxyCredential; // @synthesize proxyCredential=_proxyCredential;
@property(retain) NSURLCredential *credential; // @synthesize credential=_credential;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property float taskPriority; // @synthesize taskPriority=_taskPriority;
@property(copy) NSString *taskDescription; // @synthesize taskDescription=_taskDescription;
@property(copy) CDUnknownBlockType configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property(retain) NSURLSessionConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain) NSData *downloadResumeData; // @synthesize downloadResumeData=_downloadResumeData;
- (void).cxx_destruct;	// IMP=0x00000001012f7e64
@property _Bool deferResponseBodyLogging;
- (void)clearLoggedStreamData;	// IMP=0x00000001012f789c
- (void)appendLoggedStreamData:(id)arg1;	// IMP=0x00000001012f7814
@property(readonly) NSData *loggedStreamData;
- (void)setCommentWithFormat:(id)arg1;	// IMP=0x00000001012f775c
- (void)addPropertiesFromDictionary:(id)arg1;	// IMP=0x00000001012f769c
- (id)propertyForKey:(id)arg1;	// IMP=0x00000001012f7604
- (void)setProperty:(id)arg1 forKey:(id)arg2;	// IMP=0x00000001012f751c
@property(copy) NSDictionary *properties;
@property(retain) NSURL *destinationFileURL;
@property(retain) id userData;
- (_Bool)userStoppedFetching;	// IMP=0x00000001012f71f0
@property(retain) NSOperationQueue *sessionDelegateQueue;
- (void)setSessionNeedingInvalidation:(id)arg1;	// IMP=0x00000001012f705c
- (id)sessionNeedingInvalidation;	// IMP=0x00000001012f6ffc
@property(getter=isUsingBackgroundSession) _Bool usingBackgroundSession; // @synthesize usingBackgroundSession=_usingBackgroundSession;
@property _Bool useBackgroundSession; // @synthesize useBackgroundSession=_userRequestedBackgroundSession;
- (void)setCanShareSession:(_Bool)arg1;	// IMP=0x00000001012f6ef0
@property(readonly) _Bool canShareSession; // @synthesize canShareSession=_canShareSession;
@property(retain) NSURLSession *session;
@property(retain) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
- (void)setDownloadedLength:(long long)arg1;	// IMP=0x00000001012f6cb0
@property(readonly) long long downloadedLength; // @synthesize downloadedLength=_downloadedLength;
@property(retain) NSData *downloadedData;
@property(retain) NSURL *bodyFileURL; // @synthesize bodyFileURL=_bodyFileURL;
@property(readonly) long long bodyLength; // @synthesize bodyLength=_bodyLength;
- (void)setResponse:(id)arg1;	// IMP=0x00000001012f6938
@property(retain) NSMutableURLRequest *mutableRequest; // @synthesize mutableRequest=_request;
- (id)mutableRequestUnsynchronized;	// IMP=0x00000001012f68c4
- (void)setSystemCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001012f6620
- (CDUnknownBlockType)systemCompletionHandler;	// IMP=0x00000001012f65e4
@property double minRetryInterval;
@property double maxRetryInterval;
@property(getter=isRetryEnabled) _Bool retryEnabled;
- (_Bool)isRetryEnabledUnsynchronized;	// IMP=0x00000001012f63b8
- (id)retryTimer;	// IMP=0x00000001012f6320
- (double)nextRetryIntervalUnsynchronized;	// IMP=0x00000001012f6278
@property(readonly) double nextRetryInterval;
@property(readonly) unsigned long long retryCount;
- (void)destroyRetryTimer;	// IMP=0x00000001012f6134
- (void)retryTimerFired:(id)arg1;	// IMP=0x00000001012f6048
- (void)beginRetryTimer;	// IMP=0x00000001012f5e44
- (double)retryAfterInterval;	// IMP=0x00000001012f5c8c
- (_Bool)hasRetryAfterInterval;	// IMP=0x00000001012f5c28
- (void)shouldRetryNowForStatus:(long long)arg1 error:(id)arg2 forceAssumeRetry:(_Bool)arg3 response:(CDUnknownBlockType)arg4;	// IMP=0x00000001012f57c0
- (_Bool)isRetryError:(id)arg1;	// IMP=0x00000001012f5688
- (void)logNowWithError:(id)arg1;	// IMP=0x00000001012f561c
- (_Bool)shouldReleaseCallbacksUponCompletion;	// IMP=0x00000001012f5614
- (void)finishWithError:(id)arg1 shouldRetry:(_Bool)arg2;	// IMP=0x00000001012f4ee4
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;	// IMP=0x00000001012f4e60
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1;	// IMP=0x00000001012f4d44
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;	// IMP=0x00000001012f4930
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;	// IMP=0x00000001012f46a4
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;	// IMP=0x00000001012f4694
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;	// IMP=0x00000001012f44d0
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001012f42c0
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;	// IMP=0x00000001012f3f50
- (void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;	// IMP=0x00000001012f3da0
- (void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(CDUnknownBlockType)arg3;	// IMP=0x00000001012f3b64
- (void)postNotificationOnMainThreadWithName:(id)arg1 userInfo:(id)arg2 requireAsync:(_Bool)arg3;	// IMP=0x00000001012f3988
- (void)invokeFetchCallbacksOnCallbackQueueWithData:(id)arg1 error:(id)arg2;	// IMP=0x00000001012f371c
- (void)invokeOnCallbackQueue:(id)arg1 afterUserStopped:(_Bool)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00000001012f34ec
- (void)invokeOnCallbackUnsynchronizedQueueAfterUserStopped:(_Bool)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001012f34c4
- (void)invokeOnCallbackQueueAfterUserStopped:(_Bool)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001012f34b8
- (void)invokeOnCallbackQueueUnlessStopped:(CDUnknownBlockType)arg1;	// IMP=0x00000001012f34a0
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001012f2fc4
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeDownloadTask:(id)arg3;	// IMP=0x00000001012f2fb4
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001012f2ad8
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00000001012f2310
- (_Bool)waitForCompletionWithTimeout:(double)arg1;	// IMP=0x00000001012f20a0
- (void)retryFetch;	// IMP=0x00000001012f1fd0
- (void)sendStopNotificationIfNeeded;	// IMP=0x00000001012f1f68
- (void)setStopNotificationNeeded:(_Bool)arg1;	// IMP=0x00000001012f1f34
- (void)stopFetchReleasingCallbacks:(_Bool)arg1;	// IMP=0x00000001012f19e4
- (void)stopFetching;	// IMP=0x00000001012f199c
- (void)forgetSessionIdentifierForFetcherWithoutSyncCheck;	// IMP=0x00000001012f1904
- (void)forgetSessionIdentifierForFetcher;	// IMP=0x00000001012f18f8
- (void)releaseCallbacks;	// IMP=0x00000001012f177c
- (id)responseHeadersUnsynchronized;	// IMP=0x00000001012f1704
@property(readonly) NSDictionary *responseHeaders;
- (long long)statusCodeUnsynchronized;	// IMP=0x00000001012f161c
@property(readonly) long long statusCode;
- (id)responseUnsynchronized;	// IMP=0x00000001012f1554
@property(readonly) NSURLResponse *response;
@property(readonly, getter=isFetching) _Bool fetching;
- (_Bool)canFetchWithBackgroundSession;	// IMP=0x00000001012f145c
- (void)authorizer:(id)arg1 request:(id)arg2 finishedWithError:(id)arg3;	// IMP=0x00000001012f1434
- (void)authorizeRequest;	// IMP=0x00000001012f1398
- (void)endBackgroundTask;	// IMP=0x00000001012f1268
- (void)failToBeginFetchWithError:(id)arg1;	// IMP=0x00000001012f111c
- (id)createSessionIdentifierWithMetadata:(id)arg1;	// IMP=0x00000001012f0e90
- (id)sessionIdentifierMetadataUnsynchronized;	// IMP=0x00000001012f0cac
- (id)sessionIdentifierMetadata;	// IMP=0x00000001012f0c44
- (void)restoreDefaultStateForSessionIdentifierMetadata;	// IMP=0x00000001012f0b38
- (id)sessionIdentifierDefaultMetadata;	// IMP=0x00000001012f0a2c
@property(retain) NSDictionary *sessionUserInfo; // @synthesize sessionUserInfo=_sessionUserInfo;
- (void)setSessionIdentifier:(id)arg1;	// IMP=0x00000001012f0794
@property(readonly) NSString *sessionIdentifier;
- (void)removePersistedBackgroundSessionFromDefaults;	// IMP=0x00000001012f00c8
- (void)addPersistedBackgroundSessionToDefaults;	// IMP=0x00000001012eff9c
@property(readonly) NSURLSessionTask *sessionTask; // @synthesize sessionTask=_sessionTask;
- (void)setSessionTask:(id)arg1;	// IMP=0x00000001012efd9c
- (void)simulateDataCallbacksForTestBlockWithBodyData:(id)arg1 response:(id)arg2 responseData:(id)arg3 error:(id)arg4;	// IMP=0x00000001012ef3b8
- (void)simulateByteTransferReportWithDataLength:(long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001012ef2a0
- (void)simulateFetchForTestBlock;	// IMP=0x00000001012eeb40
- (void)beginFetchMayDelay:(_Bool)arg1 mayAuthorize:(_Bool)arg2;	// IMP=0x00000001012ed038
- (void)beginFetchWithDelegate:(id)arg1 didFinishSelector:(SEL)arg2;	// IMP=0x00000001012ecfec
- (CDUnknownBlockType)completionHandlerWithTarget:(id)arg1 didFinishSelector:(SEL)arg2;	// IMP=0x00000001012ecd80
- (void)beginFetchWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001012ecd28
- (void)dealloc;	// IMP=0x00000001012eccd8
@property(readonly, copy) NSString *description;
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000001012ecb4c
- (id)initWithRequest:(id)arg1 configuration:(id)arg2;	// IMP=0x00000001012ec87c
- (id)initWithRequest:(id)arg1;	// IMP=0x00000001012ec86c
- (id)init;	// IMP=0x00000001012ec858
- (void)setCookieStorageMethod:(long long)arg1;	// IMP=0x00000001012f8264
@property(readonly) GSDK_GTMSessionUploadFetcher *parentUploadFetcher;
- (CDUnknownBlockType)loggedStreamProviderForStreamProvider:(CDUnknownBlockType)arg1;	// IMP=0x00000001012fcb0c
- (id)loggedInputStreamForInputStream:(id)arg1;	// IMP=0x00000001012fc9d8
- (void)logFetchWithError:(id)arg1;	// IMP=0x00000001012faeec
- (id)stringFromStreamData:(id)arg1 contentType:(id)arg2;	// IMP=0x00000001012fa988
- (id)formattedStringFromData:(id)arg1 contentType:(id)arg2 JSON:(id *)arg3;	// IMP=0x00000001012fa740
- (void)inputStream:(id)arg1 readIntoBuffer:(void *)arg2 length:(long long)arg3;	// IMP=0x00000001012fce20

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

